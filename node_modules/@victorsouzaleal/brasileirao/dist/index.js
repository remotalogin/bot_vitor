import axios from 'axios';
import { JSDOM } from 'jsdom';
import UserAgent from 'user-agents';
const URL_TABELA_A = "https://p1.trrsf.com/api/musa-soccer/ms-standings-light?idChampionship=1436&idPhase=&language=pt-BR&country=BR&nav=N&timezone=BR";
const URL_RODADAS_A = "https://p1.trrsf.com/api/musa-soccer/ms-standings-games-light?idChampionship=1436&idPhase=&language=pt-BR&country=BR&nav=N&timezone=BR";
const URL_TABELA_B = "https://p1.trrsf.com/api/musa-soccer/ms-standings-light?idChampionship=1438&idPhase=&language=pt-BR&country=BR&nav=N&timezone=BR";
const URL_RODADAS_B = "https://p1.trrsf.com/api/musa-soccer/ms-standings-games-light?idChampionship=1438&idPhase=&language=pt-BR&country=BR&nav=N&timezone=BR";
export async function obterDadosBrasileiraoA(rodadas = true) {
    try {
        const tabelaTimes = await obterDadosTabela(URL_TABELA_A);
        let resultado = { tabela: tabelaTimes };
        if (rodadas)
            resultado.rodadas = await obterDadosRodadas(URL_RODADAS_A);
        return resultado;
    }
    catch (err) {
        throw err;
    }
}
export async function obterDadosBrasileiraoB(rodadas = true) {
    try {
        const tabelaTimes = await obterDadosTabela(URL_TABELA_B);
        let resultado = { tabela: tabelaTimes };
        if (rodadas)
            resultado.rodadas = await obterDadosRodadas(URL_RODADAS_B);
        return resultado;
    }
    catch (err) {
        throw err;
    }
}
async function obterPagina(url) {
    try {
        const userAgent = new UserAgent();
        const { data } = await axios.get(url, { headers: { 'User-Agent': userAgent.toString() } });
        const { window } = new JSDOM(data);
        return window;
    }
    catch (err) {
        throw err;
    }
}
async function obterDadosTabela(url) {
    try {
        const { document } = await obterPagina(url);
        const times = [];
        const $times = document.querySelectorAll("table > tbody > tr");
        $times.forEach($time => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            times.push({
                nome: ((_a = $time.querySelector('.team-name > a')) === null || _a === void 0 ? void 0 : _a.getAttribute("title")) || '',
                escudo: ((_b = $time.querySelector('.shield > a > img')) === null || _b === void 0 ? void 0 : _b.getAttribute("src")) || '',
                posicao: ((_c = $time.querySelector('.position')) === null || _c === void 0 ? void 0 : _c.innerHTML) || '',
                pontos: ((_d = $time.querySelector('.points')) === null || _d === void 0 ? void 0 : _d.innerHTML) || '',
                jogos: ((_e = $time.querySelector('td[title="Jogos"]')) === null || _e === void 0 ? void 0 : _e.innerHTML) || '',
                vitorias: ((_f = $time.querySelector('td[title="Vitórias"]')) === null || _f === void 0 ? void 0 : _f.innerHTML) || '',
                empates: ((_g = $time.querySelector('td[title="Empates"]')) === null || _g === void 0 ? void 0 : _g.innerHTML) || '',
                derrotas: ((_h = $time.querySelector('td[title="Derrotas"]')) === null || _h === void 0 ? void 0 : _h.innerHTML) || '',
                gols_pro: ((_j = $time.querySelector('td[title="Gols Pró"]')) === null || _j === void 0 ? void 0 : _j.innerHTML) || '',
                gols_contra: ((_k = $time.querySelector('td[title="Gols Contra"]')) === null || _k === void 0 ? void 0 : _k.innerHTML) || '',
                saldo_gols: ((_l = $time.querySelector('td[title="Saldo de Gols"]')) === null || _l === void 0 ? void 0 : _l.innerHTML) || '',
                aproveitamento: ((_m = $time.querySelector('td[title="Aproveitamento"]')) === null || _m === void 0 ? void 0 : _m.innerHTML) + "%",
            });
        });
        return times;
    }
    catch (err) {
        throw err;
    }
}
async function obterDadosRodadas(url) {
    try {
        const { document } = await obterPagina(url);
        let rodadas = [];
        const $rodadas = document.querySelectorAll("ul.rounds > li");
        $rodadas.forEach($rodada => {
            var _a, _b;
            const dataRodada = (_a = $rodada.querySelector("br.date-round")) === null || _a === void 0 ? void 0 : _a.getAttribute("data-date");
            if (!dataRodada)
                throw new Error("Erro ao obter informações da rodada");
            const [data] = dataRodada.split(" ");
            const [ano, mes, dia] = data.split("-");
            let dadosRodada = {
                rodada: ((_b = $rodada.querySelector("h3")) === null || _b === void 0 ? void 0 : _b.innerHTML) || '',
                inicio: `${dia}/${mes}/${ano}`,
                rodada_atual: $rodada.getAttribute("class") === "round",
                partidas: []
            };
            const $partidas = $rodada.querySelectorAll("li.match");
            $partidas.forEach($partida => {
                var _a, _b, _c, _d, _e;
                const times = (_a = $partida.querySelector('meta[itemprop="name"]')) === null || _a === void 0 ? void 0 : _a.getAttribute("content");
                if (!times)
                    throw new Error("Erro ao obter informações da rodada");
                const [time_casa, time_fora] = times.split("x").map(time => time.trim());
                const gols_casa = ((_b = $partida.querySelector('.goals.home')) === null || _b === void 0 ? void 0 : _b.innerHTML) || '';
                const gols_fora = ((_c = $partida.querySelector('.goals.away')) === null || _c === void 0 ? void 0 : _c.innerHTML) || '';
                dadosRodada.partidas.push({
                    partida: times,
                    data: ((_d = $partida.querySelector('div.details > strong.date-manager')) === null || _d === void 0 ? void 0 : _d.innerHTML) || '',
                    local: ((_e = $partida.querySelector('div.details > span.stadium')) === null || _e === void 0 ? void 0 : _e.innerHTML) || '',
                    time_casa,
                    time_fora,
                    gols_casa,
                    gols_fora,
                    resultado_texto: `${time_casa} ${gols_casa} x ${gols_fora} ${time_fora}`
                });
            });
            rodadas.push(dadosRodada);
        });
        return rodadas;
    }
    catch (err) {
        throw err;
    }
}
